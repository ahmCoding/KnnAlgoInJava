plugins {
    id 'java'
    id 'application'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}
application {
    mainClass = 'org.example.mainClasses.MainSerial' // Einstiegspunkt definieren
}
dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

tasks.register('SerialClassifier', Jar) {
    group = 'Build'
    description = 'Erzeugt ein ausführbares JAR für Serial Version von KnnAlgo.'

    manifest {
        attributes(
                'Main-Class': 'org.example.mainClasses.MainSerial'  // Main-Klasse für App1
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    archiveFileName = "serialKnn.jar"  // Name des JARs
}

tasks.register('MultiThreadFineClassifier', Jar) {
    group = 'Build'
    description = 'Erzeugt ein ausführbares JAR für Fine Version von KnnAlgo.'
    manifest {
        attributes(
                'Main-Class': 'org.example.mainClasses.MainMultiThreadFine'  // Main-Klasse für App1
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    archiveFileName = "multiFineKnn.jar"  // Name des JARs
}
tasks.register('MultiThreadCoarseClassifier', Jar) {
    group = 'Build'
    description = 'Erzeugt ein ausführbares JAR für Coarse Version von KnnAlgo.'
    manifest {
        attributes(
                'Main-Class': 'org.example.mainClasses.MainMultiThreadCoarse'  // Main-Klasse für App1
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    archiveFileName = "multiCoarseKnn.jar"  // Name des JARs
}

